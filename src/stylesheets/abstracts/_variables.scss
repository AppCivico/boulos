@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';

////
/// This file contains all application-wide Sass configuration variables
/// @group configurations
/// @todo Customize to match your design needs.
////
/// Title font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss
/// $title-font-stack: ComicSans, $basic-title-font-stack;
$title-font-stack: 'Open Sans',
  $basic-title-font-stack !default;
/// Text body font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss
/// $text-font-stack: ComicSans, $native-font-stack;
$text-font-stack: 'Open Sans',
  $native-font-stack !default;
/// Code (monospace) font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss
/// $code-font-stack: ComicSans, $basic-code-font-stack;
$code-font-stack: $basic-code-font-stack !default;
/// Font weights map
/// @access private
/// @prop {string} weight - Pure colors or a map of tones
/// @require {function} font-weight
/// @todo Customize the weights or add new ones to match your design needs.
/// @type Map
$font-weights: ( 'text': 400, 'bold': 600, 'heading': 800, );
/// Body text font-size
///
/// @access public
/// @type number
$body-font-size: 1em !default;
/// Default Leading
///
/// @access public
/// @type number
$leading: math.div(30, 16) !default;
/// flexible line heights map
/// @access private
/// @type Map
/// @prop {number} min - minimum line height expressed unitless
/// @prop {number} max - maximum line height expressed unitless
$leadings: ( 'min': 1.15, 'max': 1.5, ) !default;
/// flexible line length map
///
/// @type Map
/// @prop {number} min - minimum line length expressed in `em`
/// @prop {number} max - maximum line length expressed in `em`
$line-lengths: ( 'min': 21em, 'max': 35em, ) !default;
///
/// @link http://www.modularscale.com/?1&rem&1.25
$modularscale: ( base: 1rem, ratio: 1.25);

/// List all available colors and tones.
///
/// @access private
/// @prop {string} color - Pure colors or a map of tones
/// @prop {color | map} color.tone - Pure colors or returned color value of functions
/// @require {function} palette
/// @todo Customize the colors or add new ones to match your design needs.
$palette: (
  'poit': (
    'orange' : #ff5614,
    'green': #0c85a5,
    'dark-green': #075e7a,
  ),
  'boulos': (
    'blue': hsl(198, 100%, 44%),
    'orange': hsl(19, 76%, 51%),
    'orange-light': hsl(19, 76%, 65%),
    'orange-dark': hsl(19, 76%, 35%),
    'purple': hsl(301deg, 59%, 35%),
    'purple-light': hsl(301, 59%, 65%),
  ),
  'gray': (
    'x-light': tint(rgb(229, 231, 234), 10%),
    'light': rgb(242, 242, 242),
    'base': rgb(151, 153, 156),
    'dark': rgb(56, 56, 56),
    'x-dark': shade(rgb(64, 68, 71), 10%),
  ),
  'white': rgb(255, 255, 255),
  'black': rgb(0, 0, 0),
  'debug': rgb(255, 0, 0),
  'anchor': (
    'base': rgb(0, 102, 204),
    'link': rgb(0, 102, 204),
    'visited': rgb(128, 0, 128),
    'hover': rgb(50, 152, 255),
    'focus': rgb(50, 152, 255),
    'active': rgb(229, 0, 80),
  ),
  'border': (
    'base': rgb(192, 192, 192),
    'focus': rgb(0, 0 , 0),
  ),
  'button': (
    'base': rgb(225, 225, 225),
    'focus': rgb(229, 241, 251),
    'slider': hsl(0, 0%, 40%),
    'submit': rgb(217, 83, 79),
    'reset': transparent,
  ),
  'disabled': (
    'foreground': hsl(0, 0%, 42%),
    'background': rgb(208, 208, 208),
  ),
  'loading': (
    'foreground': hsl(0, 0%, 94%),
    'background': rgba(31, 87, 65, 0.8),
  ),
  'label': (
    'default': rgb(119, 119, 119),
    'primary': rgb(51, 122, 183),
    'success': rgb(66, 133, 66),
    'info': rgb(60, 127, 145),
    'warning': rgb(240, 173, 78),
    'danger': rgb(217, 83, 79),
  ),
  'mark': (
    'foreground': rgb(51, 51, 51),
    'background': rgb(215, 255, 90),
  ),
  'progress': (
    'base': rgb(102, 51, 204),
    'background': rgb(233, 140, 41),
  ),
  'placeholder': (
    'base': hsl(0, 0%, 34%),
    'focus': hsl(0, 0%, 56%),
  ),
  'quotes': hsl(0, 0%, 34%),
  'selection': (
    'foreground': rgb(255, 255, 255),
    'background': rgb(20, 105, 140),
  ),
  'tap-highlight': transparent,
  'target-highlight': transparent,
  'orange': (
    'light': hsl(19, 76%, 65%),
    'base': hsl(19, 76%, 51%),
    'dark': hsl(19, 76%, 35%),
  ),
  'blue': (
    'base': hsl(198, 100%, 44%),
  ),
  'purple': (
    'light': hsl(301, 59%, 65%),
    'medium': hsl(301, 59%, 50%),
    'base': hsl(301, 59%, 35%),
    'dark': hsl(301, 59%, 25%),
    'x-dark': hsl(301, 59%, 15%),
  ),
  'green': (
    'x-light': rgb(0, 255, 153),
    'light': rgb(139, 255, 205),
    'base': rgb(255, 102, 51),
    'dark': shade(rgb(255, 102, 51), 35%),
    'menu': rgb(0, 255, 153),
    'x-dark': rgb(10, 102, 97),
  ),
  'text': (
    'dark': hsl(0, 0%, 13%),
    'light': rgb(229, 231, 234),
    'base': rgb(51, 51, 51),
  ),
  'header': (
    'white': rgb(255, 255, 255),
    'yellow': rgb(244, 238, 62),
  ),
  'shadow': (
    'base': rgba(0, 0, 0, 0.6),
  ),
  'box': (
    'base': rgb(241, 241, 241),
    'dark': rgb(102, 102, 102),
    'disabled': rgb(197, 197, 197),
  ),
);

/// Default transition duration
/// @todo Customize it to match your design.
/// @type number
$duration: 1s;

/// Default border-radius
/// @todo Customize it to match your design.
/// @type number
$rounded-corner: 5px !default;
/// border default width
/// @todo Customize it to match your design.
/// @type number
$stroke: 0 !default;
/// gutter default width768
/// @todo Customize it to match your design.
/// @type number
$gutter: math.div($leading * $body-font-size, 1em) * 1rem;

@function _im-to-em($breakpoints, $base-value: 16px) {
  $new-breakpoints: ();

  @each $name, $value in $breakpoints {
    $em-value: math.div($value, $base-value) * 1em;
    $new-breakpoints: map.merge($new-breakpoints, ($name: $em-value));
  }

  @return $new-breakpoints;
}

/// Breakpoints map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are actual breakpoints expressed in pixels
$breakpoints: _im-to-em(( 'phone': 320px, 'phablet': 480px, 'tablet': 768px, 'desktop': 1024px, 'wide': 1280px, 'x-wide': 1600px, )) !default;
$toggle-breakpoints: ( 'toggle-table-layout': 48em, 'toggle-menu': 64em, );
$breakpoints: map-merge($breakpoints, $toggle-breakpoints);
// 320
// 480
// 760
// 960
// 1200
// 1600.
/// Container's maximum width
/// @type number
$max-width: 73.75rem !default;
/// Z-indexes map, gathering all Z layers of the application. Avoid to edit it.
/// @access public
/// @type Map
$layers: ( 'modal': 5000, 'dropdown': 4000, 'default': 1, 'below': -1, );
/// Relative or absolute URL where all assets are served from.
/// @todo Customize it to match your setup.
/// @type String
/// @example scss - When using a CDN
///   $base-url: 'http://cdn.example.com/assets/';
$base-url: '/static/' !default;

@function _im-to-px($breakpoints, $base-value: 16px) {
  $new-breakpoints: ();

  @each $name,
    $value in $breakpoints {
    $px-value: if(math.unit($value) == 'em', $value / 1em * $base-value, $value);
    $new-breakpoints: map.merge($new-breakpoints, ($name: $px-value));

    @if (math.unit($value) != 'em' and math.unit($value) != 'px') {
      @error 'all media queries units should be either `em` or `px`. `#{math.unit($value)}` given.';
    } @else {
      $px-value: if(math.unit($value) == 'em', $value / 1em * $base-value, $value);
      $new-breakpoints: map.merge($new-breakpoints, ($name: $px-value));
    }
  }

  @return $new-breakpoints;
}

@if meta.variable-exists('im-media-support') and $im-media-support == false {
  $breakpoints: _im-to-px($breakpoints);
}

$menu-height: 60px;
$menu-height-animate: 55px;
