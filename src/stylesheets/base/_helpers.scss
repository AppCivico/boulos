%loading-bg {
  background-color: palette('loading', 'background');
  background-image: url('../assets/images/backgrounds/loading.svg');
  background-repeat: no-repeat;
  background-position: 50% 50%;
}

%loading-el {
  overflow: hidden;

  cursor: wait;

  &::after {
    @extend %loading-bg;

    position: absolute;
    top: $gutter * -0.5;
    right: $gutter * -0.5;
    bottom: $gutter * -0.5;
    left: $gutter * -0.5;
    z-index: layer('modal');

    content: '';

    border-radius: $rounded-corner;
  }
}

/// Content which loads **after** the page does, should be informed to user.
///
/// `[aria-busy='true']` adds a loading background to any loading element
/// which can't be a parent and a pseudo element over any element other than
/// `html`.
///
/// Don't forget to customize it to your needs. Speacially the background
/// color.
///
/// Already applied to `embed` and `img`, which can cause issues with
/// transparent images.
///
/// @author Sobral
/// @group helpers
///
/// @example html
///
/// <dialog open aria-busy="true">
///   <form method="dialog">
///     [...]
///   </form>
/// </dialog>
///
[aria-busy='true'] {
  > body,
  &:not(html) {
    @extend %loading-el;

    position: relative;
  }
}

img[src$='.jpg'],
img[src$='.bmp'],
img[src$='.jpeg'],
embed {
  @extend %loading-bg;

  background-size: auto;

  &::after {
    /*
     *  Future proof reset
     */
    content: none;
  }
}

section,
input,
output,
keygen,
textarea {
  &[aria-busy='true'] {
    @extend %loading-bg;

    background-size: auto;
  }
}

.container {
  max-width: $max-width;
  padding-right: $gutter;
  padding-left: $gutter;
  margin-right: auto;
  margin-left: auto;
}

/// Load grid image background under the class `grid`
///
/// @author Sobral
/// @group helpers
///
/// @example html
/// <html class="grid">
///   <body>
///     [...]
///   </body>
/// </html>
///
.grid {
  &::after,
  &:root::before {
    position: fixed;
    top: 0;
    right: 0;
    z-index: layer('modal');

    font-size: 1rem;

    pointer-events: none;
    content: 'breakpoint: phone';
  }

  &::after {
    bottom: 0;
    left: 0;

    content: '';

    background-image: grid-image(2);
    background-position: center top;

    @media screen and (min-width: breakpoint('phablet')) {
      background-image: grid-image(3);
    }

    @media screen and (min-width: breakpoint('tablet')) {
      background-image: grid-image(4);
    }

    @media screen and (min-width: breakpoint('desktop')) {
      background-image: grid-image(5);
    }

    @media screen and (min-width: breakpoint('wide')) {
      background-image: grid-image(6);
      background-size: $max-width 100%;
    }
  }

  &:root::before {
    padding: $gutter;

    background-color: palette('debug');
    opacity: 0.75;

    @media screen and (min-width: breakpoint('phablet')) {
      content: 'breakpoint: phablet';
    }

    @media screen and (min-width: breakpoint('tablet')) {
      content: 'breakpoint: tablet';
    }

    @media screen and (min-width: breakpoint('desktop')) {
      content: 'breakpoint: desktop';
    }

    @media screen and (min-width: breakpoint('wide')) {
      content: 'breakpoint: wide';
    }
  }
}

.internal-container {
  max-width: 70rem;
  margin-right: auto;
  margin-left: auto;
}
